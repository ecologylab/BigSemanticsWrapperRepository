package ecologylab.bigsemantics.generated.library.creativeWork.blogPost;

/**
 * Automatically generated by MetaMetadataJavaTranslator
 *
 * DO NOT modify this code manually: All your changes may get lost!
 *
 * Copyright (2017) Interface Ecology Lab.
 */

import ecologylab.bigsemantics.generated.library.creativeWork.blogPost.Comments;
import ecologylab.bigsemantics.generated.library.creativeWork.blogPost.Favorites;
import ecologylab.bigsemantics.generated.library.creativeWork.blogPost.MachineTags;
import ecologylab.bigsemantics.generated.library.creativeWork.blogPost.Post;
import ecologylab.bigsemantics.metadata.builtins.GisLocation;
import ecologylab.bigsemantics.metadata.builtins.MetadataBuiltinsTypesScope;
import ecologylab.bigsemantics.metadata.builtins.RichDocument;
import ecologylab.bigsemantics.metadata.mm_name;
import ecologylab.bigsemantics.metadata.scalar.MetadataDate;
import ecologylab.bigsemantics.metadata.scalar.MetadataString;
import ecologylab.bigsemantics.metametadata.MetaMetadataCompositeField;
import ecologylab.bigsemantics.namesandnums.SemanticsNames;
import ecologylab.serialization.annotations.simpl_collection;
import ecologylab.serialization.annotations.simpl_composite;
import ecologylab.serialization.annotations.simpl_inherit;
import ecologylab.serialization.annotations.simpl_scalar;
import java.lang.String;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

/** 
 *A Flickr image post page
 */ 
@simpl_inherit
public class FlickrPhoto extends Post
{
	@simpl_scalar
	private MetadataDate dateTaken;

	@simpl_scalar
	private MetadataDate dateUploaded;

	@simpl_scalar
	private MetadataString captureDevice;

	@simpl_scalar
	private MetadataString extension;

	@simpl_composite
	@mm_name("geo_location")
	private GisLocation geoLocation;

	@simpl_composite
	@mm_name("place")
	private RichDocument place;

	@simpl_collection("machine_tags")
	@mm_name("machine_tags")
	private List<MachineTags> machineTags;

	@simpl_scalar
	private MetadataString views;

	@simpl_collection("favorites")
	@mm_name("favorites")
	private List<Favorites> favorites;

	@simpl_collection("comments")
	@mm_name("comments")
	private List<Comments> comments;

	public FlickrPhoto()
	{ super(); }

	public FlickrPhoto(MetaMetadataCompositeField mmd) {
		super(mmd);
	}


	public MetadataDate	dateTaken()
	{
		MetadataDate	result = this.dateTaken;
		if (result == null)
		{
			result = new MetadataDate();
			this.dateTaken = result;
		}
		return result;
	}

	public Date getDateTaken()
	{
		return this.dateTaken == null ? null : dateTaken().getValue();
	}

	public MetadataDate getDateTakenMetadata()
	{
		return dateTaken;
	}

	public void setDateTaken(Date dateTaken)
	{
		if (dateTaken != null)
			this.dateTaken().setValue(dateTaken);
	}

	public void setDateTakenMetadata(MetadataDate dateTaken)
	{
		this.dateTaken = dateTaken;
	}

	public MetadataDate	dateUploaded()
	{
		MetadataDate	result = this.dateUploaded;
		if (result == null)
		{
			result = new MetadataDate();
			this.dateUploaded = result;
		}
		return result;
	}

	public Date getDateUploaded()
	{
		return this.dateUploaded == null ? null : dateUploaded().getValue();
	}

	public MetadataDate getDateUploadedMetadata()
	{
		return dateUploaded;
	}

	public void setDateUploaded(Date dateUploaded)
	{
		if (dateUploaded != null)
			this.dateUploaded().setValue(dateUploaded);
	}

	public void setDateUploadedMetadata(MetadataDate dateUploaded)
	{
		this.dateUploaded = dateUploaded;
	}

	public MetadataString	captureDevice()
	{
		MetadataString	result = this.captureDevice;
		if (result == null)
		{
			result = new MetadataString();
			this.captureDevice = result;
		}
		return result;
	}

	public String getCaptureDevice()
	{
		return this.captureDevice == null ? null : captureDevice().getValue();
	}

	public MetadataString getCaptureDeviceMetadata()
	{
		return captureDevice;
	}

	public void setCaptureDevice(String captureDevice)
	{
		if (captureDevice != null)
			this.captureDevice().setValue(captureDevice);
	}

	public void setCaptureDeviceMetadata(MetadataString captureDevice)
	{
		this.captureDevice = captureDevice;
	}

	public MetadataString	extension()
	{
		MetadataString	result = this.extension;
		if (result == null)
		{
			result = new MetadataString();
			this.extension = result;
		}
		return result;
	}

	public String getExtension()
	{
		return this.extension == null ? null : extension().getValue();
	}

	public MetadataString getExtensionMetadata()
	{
		return extension;
	}

	public void setExtension(String extension)
	{
		if (extension != null)
			this.extension().setValue(extension);
	}

	public void setExtensionMetadata(MetadataString extension)
	{
		this.extension = extension;
	}

	public GisLocation getGeoLocation()
	{
		return geoLocation;
	}

	public void setGeoLocation(GisLocation geoLocation)
	{
		this.geoLocation = geoLocation;
	}

	public RichDocument getPlace()
	{
		return place;
	}

	public void setPlace(RichDocument place)
	{
		this.place = place;
	}

	public List<MachineTags> getMachineTags()
	{
		return machineTags;
	}

  // lazy evaluation:
  public List<MachineTags> machineTags()
  {
    if (machineTags == null)
      machineTags = new ArrayList<MachineTags>();
    return machineTags;
  }

  // addTo:
  public void addToMachineTags(MachineTags element)
  {
    machineTags().add(element);
  }

  // size:
  public int machineTagsSize()
  {
    return machineTags == null ? 0 : machineTags.size();
  }

	public void setMachineTags(List<MachineTags> machineTags)
	{
		this.machineTags = machineTags;
	}

	public MetadataString	views()
	{
		MetadataString	result = this.views;
		if (result == null)
		{
			result = new MetadataString();
			this.views = result;
		}
		return result;
	}

	public String getViews()
	{
		return this.views == null ? null : views().getValue();
	}

	public MetadataString getViewsMetadata()
	{
		return views;
	}

	public void setViews(String views)
	{
		if (views != null)
			this.views().setValue(views);
	}

	public void setViewsMetadata(MetadataString views)
	{
		this.views = views;
	}

	public List<Favorites> getFavorites()
	{
		return favorites;
	}

  // lazy evaluation:
  public List<Favorites> favorites()
  {
    if (favorites == null)
      favorites = new ArrayList<Favorites>();
    return favorites;
  }

  // addTo:
  public void addToFavorites(Favorites element)
  {
    favorites().add(element);
  }

  // size:
  public int favoritesSize()
  {
    return favorites == null ? 0 : favorites.size();
  }

	public void setFavorites(List<Favorites> favorites)
	{
		this.favorites = favorites;
	}

	public List<Comments> getComments()
	{
		return comments;
	}

  // lazy evaluation:
  public List<Comments> comments()
  {
    if (comments == null)
      comments = new ArrayList<Comments>();
    return comments;
  }

  // addTo:
  public void addToComments(Comments element)
  {
    comments().add(element);
  }

  // size:
  public int commentsSize()
  {
    return comments == null ? 0 : comments.size();
  }

	public void setComments(List<Comments> comments)
	{
		this.comments = comments;
	}
}
