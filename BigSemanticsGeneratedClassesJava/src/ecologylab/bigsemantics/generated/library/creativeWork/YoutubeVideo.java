package ecologylab.bigsemantics.generated.library.creativeWork;

/**
 * Automatically generated by MetaMetadataJavaTranslator
 *
 * DO NOT modify this code manually: All your changes may get lost!
 *
 * Copyright (2017) Interface Ecology Lab.
 */

import ecologylab.bigsemantics.generated.library.creativeWork.SocialVideo;
import ecologylab.bigsemantics.generated.library.creativeWork.YoutubeVideo;
import ecologylab.bigsemantics.generated.library.creativeWork.YtTable;
import ecologylab.bigsemantics.metadata.builtins.MetadataBuiltinsTypesScope;
import ecologylab.bigsemantics.metadata.builtins.RichDocument;
import ecologylab.bigsemantics.metadata.mm_name;
import ecologylab.bigsemantics.metadata.scalar.MetadataString;
import ecologylab.bigsemantics.metametadata.MetaMetadataCompositeField;
import ecologylab.bigsemantics.namesandnums.SemanticsNames;
import ecologylab.serialization.annotations.simpl_collection;
import ecologylab.serialization.annotations.simpl_composite;
import ecologylab.serialization.annotations.simpl_inherit;
import ecologylab.serialization.annotations.simpl_scalar;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/** 
 *youtube video view page
 */ 
@simpl_inherit
public class YoutubeVideo extends SocialVideo
{
	@simpl_collection("yt_table")
	@mm_name("artist_and_licenses")
	private List<YtTable> artistAndLicenses;

	@simpl_scalar
	private MetadataString videoLink;

	@simpl_scalar
	private MetadataString numberOfViews;

	@simpl_collection("youtube_video")
	@mm_name("suggested_videos")
	private List<YoutubeVideo> suggestedVideos;

	@simpl_composite
	@mm_name("suggested_playlist")
	private RichDocument suggestedPlaylist;

	public YoutubeVideo()
	{ super(); }

	public YoutubeVideo(MetaMetadataCompositeField mmd) {
		super(mmd);
	}


	public List<YtTable> getArtistAndLicenses()
	{
		return artistAndLicenses;
	}

  // lazy evaluation:
  public List<YtTable> artistAndLicenses()
  {
    if (artistAndLicenses == null)
      artistAndLicenses = new ArrayList<YtTable>();
    return artistAndLicenses;
  }

  // addTo:
  public void addToArtistAndLicenses(YtTable element)
  {
    artistAndLicenses().add(element);
  }

  // size:
  public int artistAndLicensesSize()
  {
    return artistAndLicenses == null ? 0 : artistAndLicenses.size();
  }

	public void setArtistAndLicenses(List<YtTable> artistAndLicenses)
	{
		this.artistAndLicenses = artistAndLicenses;
	}

	public MetadataString	videoLink()
	{
		MetadataString	result = this.videoLink;
		if (result == null)
		{
			result = new MetadataString();
			this.videoLink = result;
		}
		return result;
	}

	public String getVideoLink()
	{
		return this.videoLink == null ? null : videoLink().getValue();
	}

	public MetadataString getVideoLinkMetadata()
	{
		return videoLink;
	}

	public void setVideoLink(String videoLink)
	{
		if (videoLink != null)
			this.videoLink().setValue(videoLink);
	}

	public void setVideoLinkMetadata(MetadataString videoLink)
	{
		this.videoLink = videoLink;
	}

	public MetadataString	numberOfViews()
	{
		MetadataString	result = this.numberOfViews;
		if (result == null)
		{
			result = new MetadataString();
			this.numberOfViews = result;
		}
		return result;
	}

	public String getNumberOfViews()
	{
		return this.numberOfViews == null ? null : numberOfViews().getValue();
	}

	public MetadataString getNumberOfViewsMetadata()
	{
		return numberOfViews;
	}

	public void setNumberOfViews(String numberOfViews)
	{
		if (numberOfViews != null)
			this.numberOfViews().setValue(numberOfViews);
	}

	public void setNumberOfViewsMetadata(MetadataString numberOfViews)
	{
		this.numberOfViews = numberOfViews;
	}

	public List<YoutubeVideo> getSuggestedVideos()
	{
		return suggestedVideos;
	}

  // lazy evaluation:
  public List<YoutubeVideo> suggestedVideos()
  {
    if (suggestedVideos == null)
      suggestedVideos = new ArrayList<YoutubeVideo>();
    return suggestedVideos;
  }

  // addTo:
  public void addToSuggestedVideos(YoutubeVideo element)
  {
    suggestedVideos().add(element);
  }

  // size:
  public int suggestedVideosSize()
  {
    return suggestedVideos == null ? 0 : suggestedVideos.size();
  }

	public void setSuggestedVideos(List<YoutubeVideo> suggestedVideos)
	{
		this.suggestedVideos = suggestedVideos;
	}

	public RichDocument getSuggestedPlaylist()
	{
		return suggestedPlaylist;
	}

	public void setSuggestedPlaylist(RichDocument suggestedPlaylist)
	{
		this.suggestedPlaylist = suggestedPlaylist;
	}
}
