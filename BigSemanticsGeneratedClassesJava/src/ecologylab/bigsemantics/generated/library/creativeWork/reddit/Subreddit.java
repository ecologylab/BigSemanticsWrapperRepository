package ecologylab.bigsemantics.generated.library.creativeWork.reddit;

/**
 * Automatically generated by MetaMetadataJavaTranslator
 *
 * DO NOT modify this code manually: All your changes may get lost!
 *
 * Copyright (2017) Interface Ecology Lab.
 */

import ecologylab.bigsemantics.generated.library.creativeWork.blog.Blog;
import ecologylab.bigsemantics.generated.library.creativeWork.reddit.RedditPostData;
import ecologylab.bigsemantics.metadata.builtins.MetadataBuiltinsTypesScope;
import ecologylab.bigsemantics.metadata.mm_name;
import ecologylab.bigsemantics.metadata.scalar.MetadataString;
import ecologylab.bigsemantics.metametadata.MetaMetadataCompositeField;
import ecologylab.bigsemantics.namesandnums.SemanticsNames;
import ecologylab.serialization.annotations.simpl_collection;
import ecologylab.serialization.annotations.simpl_inherit;
import ecologylab.serialization.annotations.simpl_scalar;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@simpl_inherit
public class Subreddit extends Blog
{
	@simpl_scalar
	private MetadataString subscribers;

	@simpl_collection("reddit_post_data")
	@mm_name("post")
	private List<RedditPostData> post;

	public Subreddit()
	{ super(); }

	public Subreddit(MetaMetadataCompositeField mmd) {
		super(mmd);
	}


	public MetadataString	subscribers()
	{
		MetadataString	result = this.subscribers;
		if (result == null)
		{
			result = new MetadataString();
			this.subscribers = result;
		}
		return result;
	}

	public String getSubscribers()
	{
		return this.subscribers == null ? null : subscribers().getValue();
	}

	public MetadataString getSubscribersMetadata()
	{
		return subscribers;
	}

	public void setSubscribers(String subscribers)
	{
		if (subscribers != null)
			this.subscribers().setValue(subscribers);
	}

	public void setSubscribersMetadata(MetadataString subscribers)
	{
		this.subscribers = subscribers;
	}

	public List<RedditPostData> getPost()
	{
		return post;
	}

  // lazy evaluation:
  public List<RedditPostData> post()
  {
    if (post == null)
      post = new ArrayList<RedditPostData>();
    return post;
  }

  // addTo:
  public void addToPost(RedditPostData element)
  {
    post().add(element);
  }

  // size:
  public int postSize()
  {
    return post == null ? 0 : post.size();
  }

	public void setPost(List<RedditPostData> post)
	{
		this.post = post;
	}
}
