package ecologylab.bigsemantics.generated.library.creativeWork.reddit;

/**
 * Automatically generated by MetaMetadataJavaTranslator
 *
 * DO NOT modify this code manually: All your changes may get lost!
 *
 * Copyright (2017) Interface Ecology Lab.
 */

import ecologylab.bigsemantics.generated.library.creativeWork.reddit.RedditComment;
import ecologylab.bigsemantics.metadata.builtins.MetadataBuiltinsTypesScope;
import ecologylab.bigsemantics.metadata.builtins.RichDocument;
import ecologylab.bigsemantics.metadata.mm_name;
import ecologylab.bigsemantics.metametadata.MetaMetadataCompositeField;
import ecologylab.bigsemantics.namesandnums.SemanticsNames;
import ecologylab.serialization.annotations.simpl_collection;
import ecologylab.serialization.annotations.simpl_inherit;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@simpl_inherit
public class RedditComments extends RichDocument
{
	@simpl_collection("reddit_comment")
	@mm_name("comments")
	private List<RedditComment> comments;

	public RedditComments()
	{ super(); }

	public RedditComments(MetaMetadataCompositeField mmd) {
		super(mmd);
	}


	public List<RedditComment> getComments()
	{
		return comments;
	}

  // lazy evaluation:
  public List<RedditComment> comments()
  {
    if (comments == null)
      comments = new ArrayList<RedditComment>();
    return comments;
  }

  // addTo:
  public void addToComments(RedditComment element)
  {
    comments().add(element);
  }

  // size:
  public int commentsSize()
  {
    return comments == null ? 0 : comments.size();
  }

	public void setComments(List<RedditComment> comments)
	{
		this.comments = comments;
	}
}
