package ecologylab.bigsemantics.generated.library.creativeWork.reddit;

/**
 * Automatically generated by MetaMetadataJavaTranslator
 *
 * DO NOT modify this code manually: All your changes may get lost!
 *
 * Copyright (2017) Interface Ecology Lab.
 */

import ecologylab.bigsemantics.generated.library.creativeWork.reddit.RedditComment;
import ecologylab.bigsemantics.metadata.builtins.MetadataBuiltinsTypesScope;
import ecologylab.bigsemantics.metadata.builtins.RichDocument;
import ecologylab.bigsemantics.metadata.mm_name;
import ecologylab.bigsemantics.metadata.scalar.MetadataString;
import ecologylab.bigsemantics.metametadata.MetaMetadataCompositeField;
import ecologylab.bigsemantics.namesandnums.SemanticsNames;
import ecologylab.serialization.annotations.simpl_collection;
import ecologylab.serialization.annotations.simpl_composite;
import ecologylab.serialization.annotations.simpl_inherit;
import ecologylab.serialization.annotations.simpl_scalar;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@simpl_inherit
public class RedditComment extends RichDocument
{
	@simpl_composite
	@mm_name("commenter")
	private RichDocument commenter;

	@simpl_scalar
	private MetadataString age;

	@simpl_scalar
	private MetadataString karma;

	@simpl_collection("reddit_comment")
	@mm_name("replies")
	private List<RedditComment> replies;

	public RedditComment()
	{ super(); }

	public RedditComment(MetaMetadataCompositeField mmd) {
		super(mmd);
	}


	public RichDocument getCommenter()
	{
		return commenter;
	}

	public void setCommenter(RichDocument commenter)
	{
		this.commenter = commenter;
	}

	public MetadataString	age()
	{
		MetadataString	result = this.age;
		if (result == null)
		{
			result = new MetadataString();
			this.age = result;
		}
		return result;
	}

	public String getAge()
	{
		return this.age == null ? null : age().getValue();
	}

	public MetadataString getAgeMetadata()
	{
		return age;
	}

	public void setAge(String age)
	{
		if (age != null)
			this.age().setValue(age);
	}

	public void setAgeMetadata(MetadataString age)
	{
		this.age = age;
	}

	public MetadataString	karma()
	{
		MetadataString	result = this.karma;
		if (result == null)
		{
			result = new MetadataString();
			this.karma = result;
		}
		return result;
	}

	public String getKarma()
	{
		return this.karma == null ? null : karma().getValue();
	}

	public MetadataString getKarmaMetadata()
	{
		return karma;
	}

	public void setKarma(String karma)
	{
		if (karma != null)
			this.karma().setValue(karma);
	}

	public void setKarmaMetadata(MetadataString karma)
	{
		this.karma = karma;
	}

	public List<RedditComment> getReplies()
	{
		return replies;
	}

  // lazy evaluation:
  public List<RedditComment> replies()
  {
    if (replies == null)
      replies = new ArrayList<RedditComment>();
    return replies;
  }

  // addTo:
  public void addToReplies(RedditComment element)
  {
    replies().add(element);
  }

  // size:
  public int repliesSize()
  {
    return replies == null ? 0 : replies.size();
  }

	public void setReplies(List<RedditComment> replies)
	{
		this.replies = replies;
	}
}
