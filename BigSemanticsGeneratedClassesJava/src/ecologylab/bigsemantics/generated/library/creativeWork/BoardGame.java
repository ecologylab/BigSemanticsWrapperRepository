package ecologylab.bigsemantics.generated.library.creativeWork;

/**
 * Automatically generated by MetaMetadataJavaTranslator
 *
 * DO NOT modify this code manually: All your changes may get lost!
 *
 * Copyright (2017) Interface Ecology Lab.
 */

import ecologylab.bigsemantics.generated.library.creativeWork.BoardGame;
import ecologylab.bigsemantics.metadata.builtins.MetadataBuiltinsTypesScope;
import ecologylab.bigsemantics.metadata.builtins.RichDocument;
import ecologylab.bigsemantics.metadata.builtins.creativeWork.CreativeWork;
import ecologylab.bigsemantics.metadata.mm_name;
import ecologylab.bigsemantics.metadata.scalar.MetadataString;
import ecologylab.bigsemantics.metametadata.MetaMetadataCompositeField;
import ecologylab.bigsemantics.namesandnums.SemanticsNames;
import ecologylab.serialization.annotations.simpl_collection;
import ecologylab.serialization.annotations.simpl_inherit;
import ecologylab.serialization.annotations.simpl_scalar;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/** 
 *The board game info class
 */ 
@simpl_inherit
public class BoardGame extends CreativeWork
{
	@simpl_scalar
	private MetadataString numberOfPlayers;

	@simpl_scalar
	private MetadataString numberOfRatings;

	@simpl_collection("board_game")
	@mm_name("similar_games")
	private List<BoardGame> similarGames;

	@simpl_collection("rich_document")
	@mm_name("categories")
	private List<RichDocument> categories;

	public BoardGame()
	{ super(); }

	public BoardGame(MetaMetadataCompositeField mmd) {
		super(mmd);
	}


	public MetadataString	numberOfPlayers()
	{
		MetadataString	result = this.numberOfPlayers;
		if (result == null)
		{
			result = new MetadataString();
			this.numberOfPlayers = result;
		}
		return result;
	}

	public String getNumberOfPlayers()
	{
		return this.numberOfPlayers == null ? null : numberOfPlayers().getValue();
	}

	public MetadataString getNumberOfPlayersMetadata()
	{
		return numberOfPlayers;
	}

	public void setNumberOfPlayers(String numberOfPlayers)
	{
		if (numberOfPlayers != null)
			this.numberOfPlayers().setValue(numberOfPlayers);
	}

	public void setNumberOfPlayersMetadata(MetadataString numberOfPlayers)
	{
		this.numberOfPlayers = numberOfPlayers;
	}

	public MetadataString	numberOfRatings()
	{
		MetadataString	result = this.numberOfRatings;
		if (result == null)
		{
			result = new MetadataString();
			this.numberOfRatings = result;
		}
		return result;
	}

	public String getNumberOfRatings()
	{
		return this.numberOfRatings == null ? null : numberOfRatings().getValue();
	}

	public MetadataString getNumberOfRatingsMetadata()
	{
		return numberOfRatings;
	}

	public void setNumberOfRatings(String numberOfRatings)
	{
		if (numberOfRatings != null)
			this.numberOfRatings().setValue(numberOfRatings);
	}

	public void setNumberOfRatingsMetadata(MetadataString numberOfRatings)
	{
		this.numberOfRatings = numberOfRatings;
	}

	public List<BoardGame> getSimilarGames()
	{
		return similarGames;
	}

  // lazy evaluation:
  public List<BoardGame> similarGames()
  {
    if (similarGames == null)
      similarGames = new ArrayList<BoardGame>();
    return similarGames;
  }

  // addTo:
  public void addToSimilarGames(BoardGame element)
  {
    similarGames().add(element);
  }

  // size:
  public int similarGamesSize()
  {
    return similarGames == null ? 0 : similarGames.size();
  }

	public void setSimilarGames(List<BoardGame> similarGames)
	{
		this.similarGames = similarGames;
	}

	public List<RichDocument> getCategories()
	{
		return categories;
	}

  // lazy evaluation:
  public List<RichDocument> categories()
  {
    if (categories == null)
      categories = new ArrayList<RichDocument>();
    return categories;
  }

  // addTo:
  public void addToCategories(RichDocument element)
  {
    categories().add(element);
  }

  // size:
  public int categoriesSize()
  {
    return categories == null ? 0 : categories.size();
  }

	public void setCategories(List<RichDocument> categories)
	{
		this.categories = categories;
	}
}
