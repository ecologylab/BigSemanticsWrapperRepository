package ecologylab.bigsemantics.generated.library.commodity.product;

/**
 * Automatically generated by MetaMetadataJavaTranslator
 *
 * DO NOT modify this code manually: All your changes may get lost!
 *
 * Copyright (2017) Interface Ecology Lab.
 */

import ecologylab.bigsemantics.generated.library.commodity.Specification;
import ecologylab.bigsemantics.generated.library.commodity.product.Product;
import ecologylab.bigsemantics.metadata.builtins.MetadataBuiltinsTypesScope;
import ecologylab.bigsemantics.metadata.mm_name;
import ecologylab.bigsemantics.metadata.scalar.MetadataString;
import ecologylab.bigsemantics.metametadata.MetaMetadataCompositeField;
import ecologylab.bigsemantics.namesandnums.SemanticsNames;
import ecologylab.serialization.annotations.simpl_collection;
import ecologylab.serialization.annotations.simpl_inherit;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@simpl_inherit
public class BestbuyProduct extends Product
{
	@simpl_collection("specification")
	@mm_name("features")
	private List<Specification> features;

	@simpl_collection("whats_included")
	@mm_name("whats_included")
	private List<MetadataString> whatsIncluded;

	public BestbuyProduct()
	{ super(); }

	public BestbuyProduct(MetaMetadataCompositeField mmd) {
		super(mmd);
	}


	public List<Specification> getFeatures()
	{
		return features;
	}

  // lazy evaluation:
  public List<Specification> features()
  {
    if (features == null)
      features = new ArrayList<Specification>();
    return features;
  }

  // addTo:
  public void addToFeatures(Specification element)
  {
    features().add(element);
  }

  // size:
  public int featuresSize()
  {
    return features == null ? 0 : features.size();
  }

	public void setFeatures(List<Specification> features)
	{
		this.features = features;
	}

	public List<MetadataString> getWhatsIncluded()
	{
		return whatsIncluded;
	}

  // lazy evaluation:
  public List<MetadataString> whatsIncluded()
  {
    if (whatsIncluded == null)
      whatsIncluded = new ArrayList<MetadataString>();
    return whatsIncluded;
  }

  // addTo:
  public void addToWhatsIncluded(MetadataString element)
  {
    whatsIncluded().add(element);
  }

  // size:
  public int whatsIncludedSize()
  {
    return whatsIncluded == null ? 0 : whatsIncluded.size();
  }

	public void setWhatsIncluded(List<MetadataString> whatsIncluded)
	{
		this.whatsIncluded = whatsIncluded;
	}
}
