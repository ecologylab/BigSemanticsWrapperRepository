package ecologylab.bigsemantics.generated.library;

/**
 * Automatically generated by MetaMetadataJavaTranslator
 *
 * DO NOT modify this code manually: All your changes may get lost!
 *
 * Copyright (2017) Interface Ecology Lab.
 */

import ecologylab.bigsemantics.generated.library.AskNatureExpert;
import ecologylab.bigsemantics.generated.library.AskNatureOrganism;
import ecologylab.bigsemantics.generated.library.AskNatureProduct;
import ecologylab.bigsemantics.generated.library.AskNatureTaxonomy;
import ecologylab.bigsemantics.metadata.builtins.MetadataBuiltinsTypesScope;
import ecologylab.bigsemantics.metadata.builtins.RichDocument;
import ecologylab.bigsemantics.metadata.mm_name;
import ecologylab.bigsemantics.metadata.scalar.MetadataString;
import ecologylab.bigsemantics.metametadata.MetaMetadataCompositeField;
import ecologylab.bigsemantics.namesandnums.SemanticsNames;
import ecologylab.serialization.annotations.simpl_collection;
import ecologylab.serialization.annotations.simpl_composite;
import ecologylab.serialization.annotations.simpl_inherit;
import ecologylab.serialization.annotations.simpl_scalar;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@simpl_inherit
public class AskNatureStrategy extends RichDocument
{
	@simpl_scalar
	private MetadataString summary;

	@simpl_scalar
	private MetadataString excerpt;

	@simpl_composite
	@mm_name("inspiring_organism")
	private AskNatureOrganism inspiringOrganism;

	@simpl_composite
	@mm_name("expert")
	private AskNatureExpert expert;

	@simpl_scalar
	private MetadataString applicationIdeas;

	@simpl_scalar
	private MetadataString interestedIndstrialSectors;

	@simpl_collection("ask_nature_product")
	@mm_name("inspired_products")
	private List<AskNatureProduct> inspiredProducts;

	@simpl_composite
	@mm_name("biomimicry_taxonomy")
	private AskNatureTaxonomy biomimicryTaxonomy;

	public AskNatureStrategy()
	{ super(); }

	public AskNatureStrategy(MetaMetadataCompositeField mmd) {
		super(mmd);
	}


	public MetadataString	summary()
	{
		MetadataString	result = this.summary;
		if (result == null)
		{
			result = new MetadataString();
			this.summary = result;
		}
		return result;
	}

	public String getSummary()
	{
		return this.summary == null ? null : summary().getValue();
	}

	public MetadataString getSummaryMetadata()
	{
		return summary;
	}

	public void setSummary(String summary)
	{
		if (summary != null)
			this.summary().setValue(summary);
	}

	public void setSummaryMetadata(MetadataString summary)
	{
		this.summary = summary;
	}

	public MetadataString	excerpt()
	{
		MetadataString	result = this.excerpt;
		if (result == null)
		{
			result = new MetadataString();
			this.excerpt = result;
		}
		return result;
	}

	public String getExcerpt()
	{
		return this.excerpt == null ? null : excerpt().getValue();
	}

	public MetadataString getExcerptMetadata()
	{
		return excerpt;
	}

	public void setExcerpt(String excerpt)
	{
		if (excerpt != null)
			this.excerpt().setValue(excerpt);
	}

	public void setExcerptMetadata(MetadataString excerpt)
	{
		this.excerpt = excerpt;
	}

	public AskNatureOrganism getInspiringOrganism()
	{
		return inspiringOrganism;
	}

	public void setInspiringOrganism(AskNatureOrganism inspiringOrganism)
	{
		this.inspiringOrganism = inspiringOrganism;
	}

	public AskNatureExpert getExpert()
	{
		return expert;
	}

	public void setExpert(AskNatureExpert expert)
	{
		this.expert = expert;
	}

	public MetadataString	applicationIdeas()
	{
		MetadataString	result = this.applicationIdeas;
		if (result == null)
		{
			result = new MetadataString();
			this.applicationIdeas = result;
		}
		return result;
	}

	public String getApplicationIdeas()
	{
		return this.applicationIdeas == null ? null : applicationIdeas().getValue();
	}

	public MetadataString getApplicationIdeasMetadata()
	{
		return applicationIdeas;
	}

	public void setApplicationIdeas(String applicationIdeas)
	{
		if (applicationIdeas != null)
			this.applicationIdeas().setValue(applicationIdeas);
	}

	public void setApplicationIdeasMetadata(MetadataString applicationIdeas)
	{
		this.applicationIdeas = applicationIdeas;
	}

	public MetadataString	interestedIndstrialSectors()
	{
		MetadataString	result = this.interestedIndstrialSectors;
		if (result == null)
		{
			result = new MetadataString();
			this.interestedIndstrialSectors = result;
		}
		return result;
	}

	public String getInterestedIndstrialSectors()
	{
		return this.interestedIndstrialSectors == null ? null : interestedIndstrialSectors().getValue();
	}

	public MetadataString getInterestedIndstrialSectorsMetadata()
	{
		return interestedIndstrialSectors;
	}

	public void setInterestedIndstrialSectors(String interestedIndstrialSectors)
	{
		if (interestedIndstrialSectors != null)
			this.interestedIndstrialSectors().setValue(interestedIndstrialSectors);
	}

	public void setInterestedIndstrialSectorsMetadata(MetadataString interestedIndstrialSectors)
	{
		this.interestedIndstrialSectors = interestedIndstrialSectors;
	}

	public List<AskNatureProduct> getInspiredProducts()
	{
		return inspiredProducts;
	}

  // lazy evaluation:
  public List<AskNatureProduct> inspiredProducts()
  {
    if (inspiredProducts == null)
      inspiredProducts = new ArrayList<AskNatureProduct>();
    return inspiredProducts;
  }

  // addTo:
  public void addToInspiredProducts(AskNatureProduct element)
  {
    inspiredProducts().add(element);
  }

  // size:
  public int inspiredProductsSize()
  {
    return inspiredProducts == null ? 0 : inspiredProducts.size();
  }

	public void setInspiredProducts(List<AskNatureProduct> inspiredProducts)
	{
		this.inspiredProducts = inspiredProducts;
	}

	public AskNatureTaxonomy getBiomimicryTaxonomy()
	{
		return biomimicryTaxonomy;
	}

	public void setBiomimicryTaxonomy(AskNatureTaxonomy biomimicryTaxonomy)
	{
		this.biomimicryTaxonomy = biomimicryTaxonomy;
	}
}
