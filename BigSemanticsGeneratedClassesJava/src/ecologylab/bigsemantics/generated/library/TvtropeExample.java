package ecologylab.bigsemantics.generated.library;

/**
 * Automatically generated by MetaMetadataJavaTranslator
 *
 * DO NOT modify this code manually: All your changes may get lost!
 *
 * Copyright (2017) Interface Ecology Lab.
 */

import ecologylab.bigsemantics.generated.library.Tvtrope;
import ecologylab.bigsemantics.metadata.builtins.MetadataBuiltinsTypesScope;
import ecologylab.bigsemantics.metadata.builtins.RichDocument;
import ecologylab.bigsemantics.metadata.mm_name;
import ecologylab.bigsemantics.metametadata.MetaMetadataCompositeField;
import ecologylab.bigsemantics.namesandnums.SemanticsNames;
import ecologylab.serialization.annotations.simpl_collection;
import ecologylab.serialization.annotations.simpl_composite;
import ecologylab.serialization.annotations.simpl_inherit;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@simpl_inherit
public class TvtropeExample extends RichDocument
{
	@simpl_composite
	@mm_name("trope")
	private Tvtrope trope;

	@simpl_collection("tvtrope")
	@mm_name("example_tropes")
	private List<Tvtrope> exampleTropes;

	@simpl_collection("rich_document")
	@mm_name("comments")
	private List<RichDocument> comments;

	public TvtropeExample()
	{ super(); }

	public TvtropeExample(MetaMetadataCompositeField mmd) {
		super(mmd);
	}


	public Tvtrope getTrope()
	{
		return trope;
	}

	public void setTrope(Tvtrope trope)
	{
		this.trope = trope;
	}

	public List<Tvtrope> getExampleTropes()
	{
		return exampleTropes;
	}

  // lazy evaluation:
  public List<Tvtrope> exampleTropes()
  {
    if (exampleTropes == null)
      exampleTropes = new ArrayList<Tvtrope>();
    return exampleTropes;
  }

  // addTo:
  public void addToExampleTropes(Tvtrope element)
  {
    exampleTropes().add(element);
  }

  // size:
  public int exampleTropesSize()
  {
    return exampleTropes == null ? 0 : exampleTropes.size();
  }

	public void setExampleTropes(List<Tvtrope> exampleTropes)
	{
		this.exampleTropes = exampleTropes;
	}

	public List<RichDocument> getComments()
	{
		return comments;
	}

  // lazy evaluation:
  public List<RichDocument> comments()
  {
    if (comments == null)
      comments = new ArrayList<RichDocument>();
    return comments;
  }

  // addTo:
  public void addToComments(RichDocument element)
  {
    comments().add(element);
  }

  // size:
  public int commentsSize()
  {
    return comments == null ? 0 : comments.size();
  }

	public void setComments(List<RichDocument> comments)
	{
		this.comments = comments;
	}
}
