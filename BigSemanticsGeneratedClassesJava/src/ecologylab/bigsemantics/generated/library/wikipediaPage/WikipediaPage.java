package ecologylab.bigsemantics.generated.library.wikipediaPage;

/**
 * Automatically generated by MetaMetadataJavaTranslator
 *
 * DO NOT modify this code manually: All your changes may get lost!
 *
 * Copyright (2017) Interface Ecology Lab.
 */

import ecologylab.bigsemantics.generated.library.wikipediaPage.Section;
import ecologylab.bigsemantics.generated.library.wikipediaPage.WikipediaCategory;
import ecologylab.bigsemantics.metadata.builtins.Image;
import ecologylab.bigsemantics.metadata.builtins.MetadataBuiltinsTypesScope;
import ecologylab.bigsemantics.metadata.builtins.RichDocument;
import ecologylab.bigsemantics.metadata.mm_name;
import ecologylab.bigsemantics.metametadata.MetaMetadataCompositeField;
import ecologylab.bigsemantics.namesandnums.SemanticsNames;
import ecologylab.serialization.annotations.simpl_collection;
import ecologylab.serialization.annotations.simpl_inherit;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/** 
 *An article on wikipedia
 */ 
@simpl_inherit
public class WikipediaPage extends RichDocument
{
	@simpl_collection("section")
	@mm_name("sections")
	private List<Section> sections;

	@simpl_collection("image")
	@mm_name("thumbinners")
	private List<Image> thumbinners;

	@simpl_collection("wikipedia_category")
	@mm_name("categories")
	private List<WikipediaCategory> categories;

	public WikipediaPage()
	{ super(); }

	public WikipediaPage(MetaMetadataCompositeField mmd) {
		super(mmd);
	}


	public List<Section> getSections()
	{
		return sections;
	}

  // lazy evaluation:
  public List<Section> sections()
  {
    if (sections == null)
      sections = new ArrayList<Section>();
    return sections;
  }

  // addTo:
  public void addToSections(Section element)
  {
    sections().add(element);
  }

  // size:
  public int sectionsSize()
  {
    return sections == null ? 0 : sections.size();
  }

	public void setSections(List<Section> sections)
	{
		this.sections = sections;
	}

	public List<Image> getThumbinners()
	{
		return thumbinners;
	}

  // lazy evaluation:
  public List<Image> thumbinners()
  {
    if (thumbinners == null)
      thumbinners = new ArrayList<Image>();
    return thumbinners;
  }

  // addTo:
  public void addToThumbinners(Image element)
  {
    thumbinners().add(element);
  }

  // size:
  public int thumbinnersSize()
  {
    return thumbinners == null ? 0 : thumbinners.size();
  }

	public void setThumbinners(List<Image> thumbinners)
	{
		this.thumbinners = thumbinners;
	}

	public List<WikipediaCategory> getCategories()
	{
		return categories;
	}

  // lazy evaluation:
  public List<WikipediaCategory> categories()
  {
    if (categories == null)
      categories = new ArrayList<WikipediaCategory>();
    return categories;
  }

  // addTo:
  public void addToCategories(WikipediaCategory element)
  {
    categories().add(element);
  }

  // size:
  public int categoriesSize()
  {
    return categories == null ? 0 : categories.size();
  }

	public void setCategories(List<WikipediaCategory> categories)
	{
		this.categories = categories;
	}
}
