package ecologylab.bigsemantics.generated.library;

/**
 * Automatically generated by MetaMetadataJavaTranslator
 *
 * DO NOT modify this code manually: All your changes may get lost!
 *
 * Copyright (2017) Interface Ecology Lab.
 */

import ecologylab.bigsemantics.generated.library.Instructable;
import ecologylab.bigsemantics.generated.library.InstructableComment;
import ecologylab.bigsemantics.generated.library.InstructableTag;
import ecologylab.bigsemantics.generated.library.person.author.InstructableAuthor;
import ecologylab.bigsemantics.metadata.builtins.MetadataBuiltinsTypesScope;
import ecologylab.bigsemantics.metadata.builtins.RichDocument;
import ecologylab.bigsemantics.metadata.mm_name;
import ecologylab.bigsemantics.metadata.scalar.MetadataString;
import ecologylab.bigsemantics.metametadata.MetaMetadataCompositeField;
import ecologylab.bigsemantics.namesandnums.SemanticsNames;
import ecologylab.serialization.annotations.simpl_collection;
import ecologylab.serialization.annotations.simpl_composite;
import ecologylab.serialization.annotations.simpl_inherit;
import ecologylab.serialization.annotations.simpl_scalar;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@simpl_inherit
public class Instructable extends RichDocument
{
	@simpl_composite
	@mm_name("instructor")
	private InstructableAuthor instructor;

	@simpl_scalar
	private MetadataString numberOfSteps;

	@simpl_scalar
	private MetadataString views;

	@simpl_scalar
	private MetadataString favorites;

	@simpl_collection("instructable")
	@mm_name("others_by_author")
	private List<Instructable> othersByAuthor;

	@simpl_collection("instructable")
	@mm_name("related")
	private List<Instructable> related;

	@simpl_collection("instructable_tag")
	@mm_name("tags")
	private List<InstructableTag> tags;

	@simpl_collection("instructable_comment")
	@mm_name("comments")
	private List<InstructableComment> comments;

	public Instructable()
	{ super(); }

	public Instructable(MetaMetadataCompositeField mmd) {
		super(mmd);
	}


	public InstructableAuthor getInstructor()
	{
		return instructor;
	}

	public void setInstructor(InstructableAuthor instructor)
	{
		this.instructor = instructor;
	}

	public MetadataString	numberOfSteps()
	{
		MetadataString	result = this.numberOfSteps;
		if (result == null)
		{
			result = new MetadataString();
			this.numberOfSteps = result;
		}
		return result;
	}

	public String getNumberOfSteps()
	{
		return this.numberOfSteps == null ? null : numberOfSteps().getValue();
	}

	public MetadataString getNumberOfStepsMetadata()
	{
		return numberOfSteps;
	}

	public void setNumberOfSteps(String numberOfSteps)
	{
		if (numberOfSteps != null)
			this.numberOfSteps().setValue(numberOfSteps);
	}

	public void setNumberOfStepsMetadata(MetadataString numberOfSteps)
	{
		this.numberOfSteps = numberOfSteps;
	}

	public MetadataString	views()
	{
		MetadataString	result = this.views;
		if (result == null)
		{
			result = new MetadataString();
			this.views = result;
		}
		return result;
	}

	public String getViews()
	{
		return this.views == null ? null : views().getValue();
	}

	public MetadataString getViewsMetadata()
	{
		return views;
	}

	public void setViews(String views)
	{
		if (views != null)
			this.views().setValue(views);
	}

	public void setViewsMetadata(MetadataString views)
	{
		this.views = views;
	}

	public MetadataString	favorites()
	{
		MetadataString	result = this.favorites;
		if (result == null)
		{
			result = new MetadataString();
			this.favorites = result;
		}
		return result;
	}

	public String getFavorites()
	{
		return this.favorites == null ? null : favorites().getValue();
	}

	public MetadataString getFavoritesMetadata()
	{
		return favorites;
	}

	public void setFavorites(String favorites)
	{
		if (favorites != null)
			this.favorites().setValue(favorites);
	}

	public void setFavoritesMetadata(MetadataString favorites)
	{
		this.favorites = favorites;
	}

	public List<Instructable> getOthersByAuthor()
	{
		return othersByAuthor;
	}

  // lazy evaluation:
  public List<Instructable> othersByAuthor()
  {
    if (othersByAuthor == null)
      othersByAuthor = new ArrayList<Instructable>();
    return othersByAuthor;
  }

  // addTo:
  public void addToOthersByAuthor(Instructable element)
  {
    othersByAuthor().add(element);
  }

  // size:
  public int othersByAuthorSize()
  {
    return othersByAuthor == null ? 0 : othersByAuthor.size();
  }

	public void setOthersByAuthor(List<Instructable> othersByAuthor)
	{
		this.othersByAuthor = othersByAuthor;
	}

	public List<Instructable> getRelated()
	{
		return related;
	}

  // lazy evaluation:
  public List<Instructable> related()
  {
    if (related == null)
      related = new ArrayList<Instructable>();
    return related;
  }

  // addTo:
  public void addToRelated(Instructable element)
  {
    related().add(element);
  }

  // size:
  public int relatedSize()
  {
    return related == null ? 0 : related.size();
  }

	public void setRelated(List<Instructable> related)
	{
		this.related = related;
	}

	public List<InstructableTag> getTags()
	{
		return tags;
	}

  // lazy evaluation:
  public List<InstructableTag> tags()
  {
    if (tags == null)
      tags = new ArrayList<InstructableTag>();
    return tags;
  }

  // addTo:
  public void addToTags(InstructableTag element)
  {
    tags().add(element);
  }

  // size:
  public int tagsSize()
  {
    return tags == null ? 0 : tags.size();
  }

	public void setTags(List<InstructableTag> tags)
	{
		this.tags = tags;
	}

	public List<InstructableComment> getComments()
	{
		return comments;
	}

  // lazy evaluation:
  public List<InstructableComment> comments()
  {
    if (comments == null)
      comments = new ArrayList<InstructableComment>();
    return comments;
  }

  // addTo:
  public void addToComments(InstructableComment element)
  {
    comments().add(element);
  }

  // size:
  public int commentsSize()
  {
    return comments == null ? 0 : comments.size();
  }

	public void setComments(List<InstructableComment> comments)
	{
		this.comments = comments;
	}
}
