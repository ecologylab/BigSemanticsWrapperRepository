//
// ResearchGateInstitutionDepartment.cs
// s.im.pl serialization
//
// Generated by MetaMetadataDotNetTranslator.
// Copyright 2017 Interface Ecology Lab. 
//


using Ecologylab.BigSemantics.Generated.Library;
using Ecologylab.BigSemantics.Generated.Library.CreativeWorkNS.ScholarlyArticleNS;
using Ecologylab.BigSemantics.Generated.Library.PersonNS.AuthorNS;
using Ecologylab.BigSemantics.MetaMetadataNS;
using Ecologylab.BigSemantics.MetadataNS;
using Ecologylab.BigSemantics.MetadataNS.Builtins;
using Ecologylab.Collections;
using Simpl.Fundamental.Generic;
using Simpl.Serialization;
using Simpl.Serialization.Attributes;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Ecologylab.BigSemantics.Generated.Library 
{
	[SimplInherit]
	public class ResearchGateInstitutionDepartment : RichDocument
	{
		[SimplComposite]
		[MmName("stats")]
		private ResearchGateStats stats;

		[SimplComposite]
		[MmName("institution")]
		private ResearchGateInstitution institution;

		[SimplCollection("research_gate_article")]
		[MmName("top_articles")]
		private List<ResearchGateArticle> topArticles;

		[SimplCollection("research_gate_author")]
		[MmName("top_members")]
		private List<ResearchGateAuthor> topMembers;

		[SimplCollection("research_gate_article")]
		[MmName("last_weeks_articles")]
		private List<ResearchGateArticle> lastWeeksArticles;

		public ResearchGateInstitutionDepartment()
		{ }

		public ResearchGateInstitutionDepartment(MetaMetadataCompositeField mmd) : base(mmd) { }


		public ResearchGateStats Stats
		{
			get{return stats;}
			set
			{
				if (this.stats != value)
				{
					this.stats = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public ResearchGateInstitution Institution
		{
			get{return institution;}
			set
			{
				if (this.institution != value)
				{
					this.institution = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public List<ResearchGateArticle> TopArticles
		{
			get{return topArticles;}
			set
			{
				if (this.topArticles != value)
				{
					this.topArticles = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public List<ResearchGateAuthor> TopMembers
		{
			get{return topMembers;}
			set
			{
				if (this.topMembers != value)
				{
					this.topMembers = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public List<ResearchGateArticle> LastWeeksArticles
		{
			get{return lastWeeksArticles;}
			set
			{
				if (this.lastWeeksArticles != value)
				{
					this.lastWeeksArticles = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}
	}
}
