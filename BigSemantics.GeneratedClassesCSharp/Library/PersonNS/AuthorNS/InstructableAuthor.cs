//
// InstructableAuthor.cs
// s.im.pl serialization
//
// Generated by MetaMetadataDotNetTranslator.
// Copyright 2017 Interface Ecology Lab. 
//


using Ecologylab.BigSemantics.Generated.Library;
using Ecologylab.BigSemantics.MetaMetadataNS;
using Ecologylab.BigSemantics.MetadataNS;
using Ecologylab.BigSemantics.MetadataNS.Builtins;
using Ecologylab.BigSemantics.MetadataNS.Builtins.PersonNS.AuthorNS;
using Ecologylab.BigSemantics.MetadataNS.Scalar;
using Ecologylab.Collections;
using Simpl.Fundamental.Generic;
using Simpl.Serialization;
using Simpl.Serialization.Attributes;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Ecologylab.BigSemantics.Generated.Library.PersonNS.AuthorNS 
{
	[SimplInherit]
	public class InstructableAuthor : Author
	{
		[SimplScalar]
		private MetadataString instructorLocation;

		[SimplScalar]
		private MetadataString joinDate;

		[SimplScalar]
		private MetadataString favoritePercentage;

		[SimplScalar]
		private MetadataString followers;

		[SimplScalar]
		private MetadataString views;

		[SimplScalar]
		private MetadataString bestAnswers;

		[SimplCollection("instructable")]
		[MmName("instructables")]
		private List<Instructable> instructables;

		public InstructableAuthor()
		{ }

		public InstructableAuthor(MetaMetadataCompositeField mmd) : base(mmd) { }


		public MetadataString InstructorLocation
		{
			get{return instructorLocation;}
			set
			{
				if (this.instructorLocation != value)
				{
					this.instructorLocation = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public MetadataString JoinDate
		{
			get{return joinDate;}
			set
			{
				if (this.joinDate != value)
				{
					this.joinDate = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public MetadataString FavoritePercentage
		{
			get{return favoritePercentage;}
			set
			{
				if (this.favoritePercentage != value)
				{
					this.favoritePercentage = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public MetadataString Followers
		{
			get{return followers;}
			set
			{
				if (this.followers != value)
				{
					this.followers = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public MetadataString Views
		{
			get{return views;}
			set
			{
				if (this.views != value)
				{
					this.views = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public MetadataString BestAnswers
		{
			get{return bestAnswers;}
			set
			{
				if (this.bestAnswers != value)
				{
					this.bestAnswers = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public List<Instructable> Instructables
		{
			get{return instructables;}
			set
			{
				if (this.instructables != value)
				{
					this.instructables = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}
	}
}
