//
// SpringerSearch.cs
// s.im.pl serialization
//
// Generated by MetaMetadataDotNetTranslator.
// Copyright 2017 Interface Ecology Lab. 
//


using Ecologylab.BigSemantics.Generated.Library.CreativeWorkNS.PublicationNS;
using Ecologylab.BigSemantics.Generated.Library.SearchNS;
using Ecologylab.BigSemantics.MetaMetadataNS;
using Ecologylab.BigSemantics.MetadataNS;
using Ecologylab.BigSemantics.MetadataNS.Builtins;
using Ecologylab.BigSemantics.MetadataNS.Scalar;
using Ecologylab.Collections;
using Simpl.Fundamental.Generic;
using Simpl.Serialization;
using Simpl.Serialization.Attributes;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Ecologylab.BigSemantics.Generated.Library.SearchNS 
{
	/// <summary>
	/// The springer search class
	/// </summary>
	[SimplInherit]
	public class SpringerSearch : Search<SpringerBook>
	{
		[SimplCollection("search_filter")]
		[MmName("search_filters")]
		private List<Ecologylab.BigSemantics.MetadataNS.Scalar.MetadataString> searchFilters;

		[SimplCollection("springer_search")]
		[MmName("refine_search_by_content_type")]
		private List<SpringerSearch> refineSearchByContentType;

		[SimplCollection("springer_search")]
		[MmName("refine_search_by_discipline")]
		private List<SpringerSearch> refineSearchByDiscipline;

		[SimplCollection("springer_search")]
		[MmName("refine_search_by_subdiscipline")]
		private List<SpringerSearch> refineSearchBySubdiscipline;

		[SimplCollection("springer_search")]
		[MmName("refine_search_by_published_in")]
		private List<SpringerSearch> refineSearchByPublishedIn;

		[SimplCollection("springer_search")]
		[MmName("refine_search_by_language")]
		private List<SpringerSearch> refineSearchByLanguage;

		public SpringerSearch()
		{ }

		public SpringerSearch(MetaMetadataCompositeField mmd) : base(mmd) { }


		public List<Ecologylab.BigSemantics.MetadataNS.Scalar.MetadataString> SearchFilters
		{
			get{return searchFilters;}
			set
			{
				if (this.searchFilters != value)
				{
					this.searchFilters = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public List<SpringerSearch> RefineSearchByContentType
		{
			get{return refineSearchByContentType;}
			set
			{
				if (this.refineSearchByContentType != value)
				{
					this.refineSearchByContentType = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public List<SpringerSearch> RefineSearchByDiscipline
		{
			get{return refineSearchByDiscipline;}
			set
			{
				if (this.refineSearchByDiscipline != value)
				{
					this.refineSearchByDiscipline = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public List<SpringerSearch> RefineSearchBySubdiscipline
		{
			get{return refineSearchBySubdiscipline;}
			set
			{
				if (this.refineSearchBySubdiscipline != value)
				{
					this.refineSearchBySubdiscipline = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public List<SpringerSearch> RefineSearchByPublishedIn
		{
			get{return refineSearchByPublishedIn;}
			set
			{
				if (this.refineSearchByPublishedIn != value)
				{
					this.refineSearchByPublishedIn = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public List<SpringerSearch> RefineSearchByLanguage
		{
			get{return refineSearchByLanguage;}
			set
			{
				if (this.refineSearchByLanguage != value)
				{
					this.refineSearchByLanguage = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}
	}
}
