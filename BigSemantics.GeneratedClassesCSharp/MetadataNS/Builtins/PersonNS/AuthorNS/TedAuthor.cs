//
// TedAuthor.cs
// s.im.pl serialization
//
// Generated by MetaMetadataDotNetTranslator.
// Copyright 2017 Interface Ecology Lab. 
//


using Ecologylab.BigSemantics.MetaMetadataNS;
using Ecologylab.BigSemantics.MetadataNS;
using Ecologylab.BigSemantics.MetadataNS.Builtins;
using Ecologylab.BigSemantics.MetadataNS.Builtins.PersonNS.AuthorNS;
using Ecologylab.BigSemantics.MetadataNS.Scalar;
using Ecologylab.Collections;
using Simpl.Fundamental.Generic;
using Simpl.Serialization;
using Simpl.Serialization.Attributes;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Ecologylab.BigSemantics.MetadataNS.Builtins.PersonNS.AuthorNS 
{
	[SimplInherit]
	public class TedAuthor : Author
	{
		[SimplScalar]
		private MetadataString occupation;

		[SimplScalar]
		private MetadataString firstP;

		[SimplScalar]
		private MetadataString secondP;

		[SimplScalar]
		private MetadataString credentials;

		[SimplScalar]
		private MetadataString whatOthersSay;

		[SimplCollection("badge")]
		[MmName("badges")]
		private List<Ecologylab.BigSemantics.MetadataNS.Scalar.MetadataString> badges;

		[SimplCollection("tedauthor_quote")]
		[MmName("quotes")]
		private List<TedauthorQuote> quotes;

		public TedAuthor()
		{ }

		public TedAuthor(MetaMetadataCompositeField mmd) : base(mmd) { }


		public MetadataString Occupation
		{
			get{return occupation;}
			set
			{
				if (this.occupation != value)
				{
					this.occupation = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public MetadataString FirstP
		{
			get{return firstP;}
			set
			{
				if (this.firstP != value)
				{
					this.firstP = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public MetadataString SecondP
		{
			get{return secondP;}
			set
			{
				if (this.secondP != value)
				{
					this.secondP = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public MetadataString Credentials
		{
			get{return credentials;}
			set
			{
				if (this.credentials != value)
				{
					this.credentials = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public MetadataString WhatOthersSay
		{
			get{return whatOthersSay;}
			set
			{
				if (this.whatOthersSay != value)
				{
					this.whatOthersSay = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public List<Ecologylab.BigSemantics.MetadataNS.Scalar.MetadataString> Badges
		{
			get{return badges;}
			set
			{
				if (this.badges != value)
				{
					this.badges = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public List<TedauthorQuote> Quotes
		{
			get{return quotes;}
			set
			{
				if (this.quotes != value)
				{
					this.quotes = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}
	}
}
